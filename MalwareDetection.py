
# Importing libraries


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


# Exploring the malware dataset

# Malware Dataset:https://github.com/verma089vikas/Malware-Detection-Using-Machine-Learning/blob/4ed56b706be8288daee3b63e9e703029b6b7d7ae/MalwareData%20(1).csv.gz

#                41,323 binaries (exe,dll) - legitimate
#                96,724 malware files from virusshare.com




malData = pd.read_csv('/content/drive/MyDrive/MalwareData (1).csv.gz', sep='|')

malData.head()  # to see 1st five rows of the dataset

malData.shape  

malData.describe()  # to see aggregate functionalities.

legit = malData[0:41323].drop(['legitimate'], axis=1)
mal = malData[41323::].drop(['legitimate'], axis=1)

print("The shape of the legit dataset is : %s samples , %s features"%(legit.shape[0],legit.shape[1]))
print('The shape of the mal dataset is : %s samples , %s features '%(mal.shape[0],mal.shape[1]))

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.hist(malData['legitimate'],20)
plt.show()




# Data Cleaning / preprocessing


y = malData['legitimate']
malData = malData.drop(['legitimate'],axis=1)

malData = malData.drop(['Name'],axis=1)
malData = malData.drop(['md5'],axis=1)
print("The Name and md5 variables are removed successfully")




#  Splitting the dataset into test and train


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(malData,y,test_size=0.2)

X_train.shape




# Model Building

# 1. Random Forest


from sklearn.ensemble import RandomForestClassifier
#from sklearn.datasets import make_Classification

clf = RandomForestClassifier(max_depth=2,random_state=0)
randomModel = clf.fit(X_train,y_train)




# Random Forest Evaluation on test data


from sklearn.metrics import f1_score,accuracy_score,plot_confusion_matrix,auc,confusion_matrix

# Accuracy on the training dataset
train_pred = randomModel.predict(X_train)
accuracy_score(y_train,train_pred)

# Accuracy on the testing dataset
prediction = randomModel.predict(X_test)
accuracy_score(y_test,prediction)

f1_score(y_test,prediction)



#  Confusion Matrix



titles_options = [("confusion matrix, without normalization", None),("normalized confusion matrix", 'true')]

for title, normalize in titles_options:
  disp = plot_confusion_matrix(randomModel,X_test,y_test,display_labels = 'legitimate',
                               cmap = plt.cm.Blues,
                               normalize = normalize)
  
  disp.ax_.set_title(title)

  print(title)
  print(disp.confusion_matrix)

  plt.show()
  
  
  
  
  
  
  
  ##   2. Logistic Regression
  
  
  
  
  from sklearn.linear_model import LogisticRegression
#from sklearn.datasets import make_Classification

clf = LogisticRegression(random_state=0)
logModel = clf.fit(X_train,y_train)


from sklearn.metrics import f1_score,accuracy_score,plot_confusion_matrix,auc,confusion_matrix

# Accuracy on the training dataset
train_pred1 = logModel.predict(X_train)
accuracy_score(y_train,train_pred1)


# Accuracy on the testing dataset
prediction1 = logModel.predict(X_test)
accuracy_score(y_test,prediction1)

f1_score(y_test,prediction1)



# Confusion Matrix

titles_options = [("confusion matrix, without normalization", None),("normalized confusion matrix", 'true')]

for title, normalize in titles_options:
  disp = plot_confusion_matrix(logModel,X_test,y_test,display_labels = 'legitimate',
                               cmap = plt.cm.Blues,
                               normalize = normalize)
  
  disp.ax_.set_title(title)

  print(title)
  print(disp.confusion_matrix)

  plt.show()
  
  
  
  
  
  ##  3. Decision Tree
  
  
  
  from sklearn.tree import DecisionTreeClassifier
#from sklearn.datasets import make_Classification

clf = DecisionTreeClassifier(random_state=0)
treeModel = clf.fit(X_train,y_train)

from sklearn.metrics import f1_score,accuracy_score,plot_confusion_matrix,auc,confusion_matrix

# Accuracy on the training dataset
train_pred2 = treeModel.predict(X_train)
accuracy_score(y_train,train_pred2)

# Accuracy on the testing dataset
prediction2 = treeModel.predict(X_test)
accuracy_score(y_test,prediction2)

f1_score(y_test,prediction2)



## Confusion Matrix



titles_options = [("confusion matrix, without normalization", None),("normalized confusion matrix", 'true')]

for title, normalize in titles_options:
  disp = plot_confusion_matrix(treeModel,X_test,y_test,display_labels = 'legitimate',
                               cmap = plt.cm.Blues,
                               normalize = normalize)
  
  disp.ax_.set_title(title)

  print(title)
  print(disp.confusion_matrix)

  plt.show()
  
  
  



